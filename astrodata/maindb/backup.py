"""Creates encrypted backup file of the database"""


# As root create a cron table with:

# crontab -u ubuntu -e

# 30 14 * * 6 /usr/bin/python3 /home/ubuntu/www/astrodata/maindb/backup.py >/dev/null 2>&1
#
# ie 2:30 afternoon every saturday



import sys, os, sqlite3, bz2, datetime, pathlib

from cryptography.fernet import Fernet


# This is a key generated by:
# from cryptography.fernet import Fernet
# key = Fernet.generate_key()
#
# As this is shown on github, before going live generate a new key

key = b'X_iVOrYmWlob2UjIHXIlnHWjaEQQPsTqiJB7sgaoaA4='


# This is the directory where backups will be saved

backups_directory = "/home/ubuntu/www/astrodata/served/backups"


def dump_database():
    "Returns a string being a dump of the sql database"
    database_file = os.path.join(os.path.dirname(os.path.realpath(__file__)), 'main.db')
    try:
        con = sqlite3.connect(database_file, detect_types=sqlite3.PARSE_DECLTYPES)
        con.execute("PRAGMA foreign_keys = 1")
        sql_list = list(con.iterdump())
    except:
        return
    finally:
        con.close()
    if not sql_list:
        return
    return "\n".join(sql_list)


def compress(data):
    "Returns the data string as a bz2 compressed binary string"
    return bz2.compress(data.encode('utf-8'))

def encrypt(bdata):
    "Encrypt the binary data"
    f = Fernet(key)
    return f.encrypt(bdata)


def savedata(edata):
    "Saves the binary data to a file in the backups directory. The filename will be composed of datetime string"
    if not os.path.isdir(backups_directory):
        print(f"The backup directory {backups_directory} does not exist, please create it")
        sys.exit(1)
    destinationfile = os.path.join(backups_directory, datetime.datetime.now().strftime("%Y%m%d%H%M.backup"))
    with open(destinationfile, 'wb') as f:
        f.write(edata)

def limitfiles():
    "Deletes old backup files, leaving just latest five in the backup directory"
    destination = pathlib.Path(backups_directory)
    serverfiles = [f.name for f in destination.iterdir() if f.is_file()]
    if len(serverfiles) <= 5:
        return
    # delete the last one
    serverfiles.sort(reverse=True)
    oldest_file = destination / serverfiles[-1]
    oldest_file.unlink()


if __name__ == "__main__":
    data = dump_database()
    if data is None:
        print("Failed to backup the database")
        sys.exit(1)
    compressed_data = compress(data)
    encrypted_data = encrypt(compressed_data)
    savedata(encrypted_data)
    limitfiles()
    sys.exit(0)



